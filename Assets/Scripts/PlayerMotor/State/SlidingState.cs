using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SlidingState : BaseState
{
    // Defining the names of situations player might have during game to manipulate animation controller...
    private string SLIDE_NAME = "Slide";
    private string RUNNING_NAME = "Running";
    // Time to define sliding duration...
    public float slideDuration = 1.0f;

    // Collider logic...
    private Vector3 initialCenter; // Where is the center of our character controller...
    private float initialSize; // Originial size that how big is the radius origanlly...
    private float slideStart; // When to exactly slide start...

    // This state has been entered, firstly do needed...
    public override void Construct()
    {
        // Trigger the Sliding animation...
        motor.animator?.SetTrigger(SLIDE_NAME);
        // That way we get time at the point we enter that state...
        slideStart = Time.time;
        // Before sliding, store the height of characterController as initial value...
        initialSize = motor.characterController.height;
        // Before sliding as initial, store the center of characterController as initial value...
        initialCenter = motor.characterController.center;

        // Manipulate height and center values, when the state enter to sliding state...
        motor.characterController.height = initialSize * 0.5f;
        motor.characterController.center = initialCenter * 0.5f;
    }

    // Put them back to what they were, when this class has destructed...
    public override void Destruct()
    {
        motor.characterController.height = initialSize;
        motor.characterController.center = initialCenter;
        // Trigger animation to back which was Running...
        motor.animator?.SetTrigger(RUNNING_NAME);
    }

    // Determine the states and lanes depends on input entered...
    public override void Transition()
    {
        // If the screen has been swiped left...
        if (InputManager.Instance.SwipeLeft)
        {
            // Change lane, go left...
            motor.ChangeLane(-1);
        }
        // If the screen has been swiped right...
        if (InputManager.Instance.SwipeRight)
        {
            // Change lane, go right...
            motor.ChangeLane(1);
        }
        // If the player was not on ground
        if(!motor.isGrounded)
        {
            // Change the state to FallingState...
            motor.ChangeState(GetComponent<FallingState>());
        }


        // If the screen has been swiped up...
        if (InputManager.Instance.SwipeUp)
        {
            // Change the state to JumpingState...
            motor.ChangeState(GetComponent<JumpingState>());
        }

        // If slide duration has been completed...
        if (Time.time - slideStart > slideDuration)
        {
            // Change the state to RunningState...
            motor.ChangeState(GetComponent<RunningState>());
        }


    }

    // Return the movement depends on the behaviour of this class...
    public override Vector3 ProcessMotion()
    {
        // Set initially movement to zero in all directions...
        Vector3 move = Vector3.zero;

        move.x = motor.SnapToLane(); // movement in x direction...
        move.y = -1.0f; // A small force to keep player on the floor...
        move.z = motor.baseRunSpeed; // movement in y direction...

        return move;
    }
}
